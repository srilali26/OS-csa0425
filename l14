#include <stdio.h>

#define MAX_FRAMES 3
#define MAX_PAGES 20

int find_optimal_page(int pages[], int page_frames[], int start_index, int num_frames) {
    int max_future_index = -1;
    int page_to_replace = -1;

    for (int i = 0; i < num_frames; i++) {
        int page_found = 0;

        for (int j = start_index + 1; j < MAX_PAGES; j++) {
            if (pages[j] == page_frames[i]) {
                if (j > max_future_index) {
                    max_future_index = j;
                    page_to_replace = i;
                }
                page_found = 1;
                break;
            }
        }

        if (!page_found) {
            return i;
        }
    }

    if (page_to_replace == -1) {
        page_to_replace = 0;
    }

    return page_to_replace;
}

int main() {
    int page_frames[MAX_FRAMES];
    int num_faults = 0;

    int pages[MAX_PAGES] = {7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1};

    for (int i = 0; i < MAX_FRAMES; i++) {
        page_frames[i] = -1;
    }

    for (int i = 0; i < MAX_PAGES; i++) {
        int page_found = 0;

        for (int j = 0; j < MAX_FRAMES; j++) {
            if (page_frames[j] == pages[i]) {
                page_found = 1;
                break;
            }
        }

        if (!page_found) {
            num_faults++;
            int page_to_replace = find_optimal_page(pages, page_frames, i, MAX_FRAMES);
            page_frames[page_to_replace] = pages[i];
        }
    }

    printf("Number of page faults: %d\n", num_faults);

    return 0;
}
